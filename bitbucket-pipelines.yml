image: node:20-alpine

definitions:
  caches:
    yarn: ~/.cache/yarn
    node_modules: node_modules
    next_cache: .next/cache
  services:
    docker:
      memory: 2048

pipelines:
  branches:
    main:
      - step:
          name: Test & Lint
          caches:
            - yarn
            - node_modules
          script:
            - echo "üîç Starting Test & Lint step..."
            - echo "üìã Environment Variables:"
            - echo "  NODE_ENV: $NODE_ENV"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  BITBUCKET_BRANCH: $BITBUCKET_BRANCH"
            - echo "  BITBUCKET_REPO_SLUG: $BITBUCKET_REPO_SLUG"
            - echo "  BITBUCKET_WORKSPACE: $BITBUCKET_WORKSPACE"
            - echo "  PWD: $(pwd)"
            - echo "  Node version: $(node --version)"
            - echo "  Yarn version: $(yarn --version)"
            - echo ""
            - echo "üì¶ Installing dependencies..."
            - yarn install --frozen-lockfile
            - echo "‚úÖ Dependencies installed successfully"
            - echo ""
            - echo "üîç Running linting..."
            - yarn lint
            - echo "‚úÖ Linting completed"
            - echo ""
            - echo "üîç Running type checking..."
            - yarn type-check
            - echo "‚úÖ Type checking completed"
            - echo ""
            - echo "üß™ Running tests..."
            - yarn test:ci
            - echo "‚úÖ Tests completed"
            - echo ""
            - echo "üîí Running security scan..."
            - yarn security:scan
            - echo "‚úÖ Security scan completed"
            - echo "üéâ Test & Lint step completed successfully!"
          artifacts:
            - node_modules/**
            - .next/cache/**
      - step:
          name: Build & Push to Registry
          services:
            - docker
          caches:
            - yarn
            - node_modules
          script:
            - echo "üê≥ Starting Build & Push to Registry step..."
            - echo "üìã Build Parameters:"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  BITBUCKET_BRANCH: $BITBUCKET_BRANCH"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  PWD: $(pwd)"
            - echo "  Docker version: $(docker --version)"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:prod-$BITBUCKET_COMMIT
            - export IMAGE_NAME_LATEST=majali1/bookagri-website:latest
            - echo "üì¶ Image Names:"
            - echo "  IMAGE_NAME: $IMAGE_NAME"
            - echo "  IMAGE_NAME_LATEST: $IMAGE_NAME_LATEST"
            - echo ""
            - echo "üî® Building Docker image..."
            - docker build -f Dockerfile.production -t $IMAGE_NAME -t $IMAGE_NAME_LATEST .
            - echo "‚úÖ Docker build completed successfully"
            - echo ""
            - echo "üîê Logging into Docker Hub..."
            - echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USERNAME --password-stdin
            - echo "‚úÖ Docker Hub login successful"
            - echo ""
            - echo "üì§ Pushing images to registry..."
            - docker push $IMAGE_NAME
            - echo "‚úÖ Pushed $IMAGE_NAME"
            - docker push $IMAGE_NAME_LATEST
            - echo "‚úÖ Pushed $IMAGE_NAME_LATEST"
            - echo ""
            - echo "üßπ Cleaning up local images..."
            - docker rmi $IMAGE_NAME $IMAGE_NAME_LATEST
            - echo "‚úÖ Local images cleaned up"
            - echo "üéâ Build & Push to Registry step completed successfully!"
          artifacts:
            - $IMAGE_NAME
      - step:
          name: Deploy to Test
          deployment: test
          services:
            - docker
          script:
            - echo "üöÄ Starting Deploy to Test step..."
            - echo "üìã Deployment Parameters:"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  SSH_USER: $SSH_USER"
            - echo "  SSH_SERVER: $SSH_SERVER"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  CONTAINERS_TO_STOP: $CONTAINERS_TO_STOP"
            - echo "  SERVER_PORT: $SERVER_PORT"
            - echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:prod-$BITBUCKET_COMMIT
            - echo "üì¶ Image Name: $IMAGE_NAME"
            - echo ""
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  set -e
                  echo "üöÄ Starting deployment to test environment..."
                  echo "üìã Server Parameters:"
                  echo "  SSH_USER: $SSH_USER"
                  echo "  SSH_SERVER: $SSH_SERVER"
                  echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
                  echo "  CONTAINERS_TO_STOP: $CONTAINERS_TO_STOP"
                  echo "  SERVER_PORT: $SERVER_PORT"
                  echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
                  echo "  IMAGE_NAME: $IMAGE_NAME"
                  echo ""
                  echo "üîê Logging into Docker Hub..."
                  docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
                  echo "‚úÖ Docker Hub login successful"
                  echo ""
                  echo "üì• Pulling latest image..."
                  docker pull $IMAGE_NAME
                  echo "‚úÖ Image pulled successfully"
                  echo ""
                  echo "üõë Stopping existing container..."
                  docker stop $CONTAINERS_TO_STOP || true
                  echo "‚úÖ Container stopped"
                  echo ""
                  echo "üóëÔ∏è Removing old container..."
                  docker rm $CONTAINERS_TO_STOP || true
                  echo "‚úÖ Container removed"
                  echo ""
                  echo "üöÄ Starting new container..."
                  docker run -d \
                    --name $CONTAINERS_TO_STOP \
                    --restart unless-stopped \
                    -p $SERVER_PORT:3000 \
                    -e NEXT_PUBLIC_NODE_ENV=test \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    $IMAGE_NAME
                  echo "‚úÖ Container started successfully"
                  echo ""
                  echo "üßπ Cleaning up old images..."
                  docker system prune -f
                  echo "‚úÖ Cleanup completed"
                  echo ""
                  echo "üè• Checking container health..."
                  sleep 10
                  if curl -f http://localhost:$SERVER_PORT/api/health; then
                    echo "‚úÖ Health check passed"
                  else
                    echo "‚ö†Ô∏è Health check failed, but continuing..."
                  fi
                  echo "üéâ Test deployment completed successfully!"
      - step:
          name: Deploy to Staging
          deployment: staging
          trigger: manual
          services:
            - docker
          script:
            - echo "üöÄ Starting Deploy to Staging step (Manual Trigger)..."
            - echo "üìã Staging Deployment Parameters:"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  SSH_USER: $SSH_USER"
            - echo "  SSH_SERVER: $SSH_SERVER"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  CONTAINERS_TO_STOP_STAGING: $CONTAINERS_TO_STOP_STAGING"
            - echo "  SERVER_PORT_STAGING: $SERVER_PORT_STAGING"
            - echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:prod-$BITBUCKET_COMMIT
            - echo "üì¶ Image Name: $IMAGE_NAME"
            - echo ""
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  set -e
                  echo "üöÄ Starting deployment to staging environment..."
                  echo "üìã Staging Server Parameters:"
                  echo "  SSH_USER: $SSH_USER"
                  echo "  SSH_SERVER: $SSH_SERVER"
                  echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
                  echo "  CONTAINERS_TO_STOP_STAGING: $CONTAINERS_TO_STOP_STAGING"
                  echo "  SERVER_PORT_STAGING: $SERVER_PORT_STAGING"
                  echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
                  echo "  IMAGE_NAME: $IMAGE_NAME"
                  echo ""
                  echo "üîê Logging into Docker Hub..."
                  docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
                  echo "‚úÖ Docker Hub login successful"
                  echo ""
                  echo "üì• Pulling latest image..."
                  docker pull $IMAGE_NAME
                  echo "‚úÖ Image pulled successfully"
                  echo ""
                  echo "üõë Stopping existing staging container..."
                  docker stop $CONTAINERS_TO_STOP_STAGING || true
                  echo "‚úÖ Staging container stopped"
                  echo ""
                  echo "üóëÔ∏è Removing old staging container..."
                  docker rm $CONTAINERS_TO_STOP_STAGING || true
                  echo "‚úÖ Staging container removed"
                  echo ""
                  echo "üöÄ Starting new staging container..."
                  docker run -d \
                    --name $CONTAINERS_TO_STOP_STAGING \
                    --restart unless-stopped \
                    -p $SERVER_PORT_STAGING:3000 \
                    -e NEXT_PUBLIC_NODE_ENV=staging \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    $IMAGE_NAME
                  echo "‚úÖ Staging container started successfully"
                  echo ""
                  echo "üßπ Cleaning up old images..."
                  docker system prune -f
                  echo "‚úÖ Cleanup completed"
                  echo ""
                  echo "üè• Checking staging container health..."
                  sleep 10
                  if curl -f http://localhost:$SERVER_PORT_STAGING/api/health; then
                    echo "‚úÖ Staging health check passed"
                  else
                    echo "‚ö†Ô∏è Staging health check failed, but continuing..."
                  fi
                  echo "üéâ Staging deployment completed successfully!"
      - step:
          name: Deploy to Production
          deployment: production
          trigger: manual
          services:
            - docker
          script:
            - echo "üöÄ Starting Deploy to Production step (Manual Trigger)..."
            - echo "üìã Production Deployment Parameters:"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  SSH_USER: $SSH_USER"
            - echo "  SSH_SERVER: $SSH_SERVER"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  CONTAINERS_TO_STOP: $CONTAINERS_TO_STOP"
            - echo "  SERVER_PORT: $SERVER_PORT"
            - echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:prod-$BITBUCKET_COMMIT
            - echo "üì¶ Image Name: $IMAGE_NAME"
            - echo ""
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  set -e
                  echo "üöÄ Starting production deployment..."
                  echo "üìã Production Server Parameters:"
                  echo "  SSH_USER: $SSH_USER"
                  echo "  SSH_SERVER: $SSH_SERVER"
                  echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
                  echo "  CONTAINERS_TO_STOP: $CONTAINERS_TO_STOP"
                  echo "  SERVER_PORT: $SERVER_PORT"
                  echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
                  echo "  IMAGE_NAME: $IMAGE_NAME"
                  echo ""
                  echo "üîê Logging into Docker Hub..."
                  docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
                  echo "‚úÖ Docker Hub login successful"
                  echo ""
                  echo "üì• Pulling latest image..."
                  docker pull $IMAGE_NAME
                  echo "‚úÖ Image pulled successfully"
                  echo ""
                  echo "üíæ Creating backup of current deployment..."
                  docker tag $CONTAINERS_TO_STOP $CONTAINERS_TO_STOP-backup-$(date +%Y%m%d-%H%M%S) || true
                  echo "‚úÖ Backup created"
                  echo ""
                  echo "üõë Stopping existing production container..."
                  docker stop $CONTAINERS_TO_STOP || true
                  echo "‚úÖ Production container stopped"
                  echo ""
                  echo "üóëÔ∏è Removing old production container..."
                  docker rm $CONTAINERS_TO_STOP || true
                  echo "‚úÖ Production container removed"
                  echo ""
                  echo "üöÄ Starting new production container..."
                  docker run -d \
                    --name $CONTAINERS_TO_STOP \
                    --restart unless-stopped \
                    -p $SERVER_PORT:3000 \
                    -e NEXT_PUBLIC_NODE_ENV=production \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    $IMAGE_NAME
                  echo "‚úÖ Production container started successfully"
                  echo ""
                  echo "üè• Checking production container health..."
                  sleep 10
                  if curl -f http://localhost:$SERVER_PORT/api/health; then
                    echo "‚úÖ Production health check passed"
                    echo "üßπ Cleaning up old backups (keep last 3)..."
                    docker images | grep $CONTAINERS_TO_STOP-backup | tail -n +4 | awk '{print $3}' | xargs -r docker rmi
                    echo "‚úÖ Old backups cleaned up"
                  else
                    echo "‚ùå Health check failed, rolling back..."
                    echo "üõë Stopping new container..."
                    docker stop $CONTAINERS_TO_STOP
                    echo "üóëÔ∏è Removing new container..."
                    docker rm $CONTAINERS_TO_STOP
                    echo "üîÑ Restoring backup..."
                    docker tag $CONTAINERS_TO_STOP-backup-$(date +%Y%m%d-%H%M%S) $CONTAINERS_TO_STOP
                    echo "üöÄ Starting backup container..."
                    docker run -d \
                      --name $CONTAINERS_TO_STOP \
                      --restart unless-stopped \
                      -p $SERVER_PORT:3000 \
                      -e NEXT_PUBLIC_NODE_ENV=production \
                      -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                      $CONTAINERS_TO_STOP
                    echo "‚úÖ Rollback completed"
                    exit 1
                  fi
                  echo ""
                  echo "üßπ Cleaning up old images..."
                  docker system prune -f
                  echo "‚úÖ Cleanup completed"
                  echo "üéâ Production deployment completed successfully!"

    staging:
      - step:
          name: Test & Lint
          caches:
            - yarn
            - node_modules
          script:
            - echo "üîç Starting Test & Lint step (Staging)..."
            - echo "üìã Environment Variables:"
            - echo "  NODE_ENV: $NODE_ENV"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  BITBUCKET_BRANCH: $BITBUCKET_BRANCH"
            - echo "  PWD: $(pwd)"
            - echo "  Node version: $(node --version)"
            - echo "  Yarn version: $(yarn --version)"
            - echo ""
            - echo "üì¶ Installing dependencies..."
            - yarn install --frozen-lockfile
            - echo "‚úÖ Dependencies installed successfully"
            - echo ""
            - echo "üîç Running linting..."
            - yarn lint
            - echo "‚úÖ Linting completed"
            - echo ""
            - echo "üîç Running type checking..."
            - yarn type-check
            - echo "‚úÖ Type checking completed"
            - echo ""
            - echo "üß™ Running tests..."
            - yarn test:ci
            - echo "‚úÖ Tests completed"
            - echo "üéâ Test & Lint step completed successfully!"
          artifacts:
            - node_modules/**
            - .next/cache/**
      - step:
          name: Build & Push to Registry
          services:
            - docker
          caches:
            - yarn
            - node_modules
          script:
            - echo "üê≥ Starting Build & Push to Registry step (Staging)..."
            - echo "üìã Build Parameters:"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  BITBUCKET_BRANCH: $BITBUCKET_BRANCH"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  PWD: $(pwd)"
            - echo "  Docker version: $(docker --version)"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:staging-$BITBUCKET_COMMIT
            - export IMAGE_NAME_LATEST=majali1/bookagri-website:staging-latest
            - echo "üì¶ Image Names:"
            - echo "  IMAGE_NAME: $IMAGE_NAME"
            - echo "  IMAGE_NAME_LATEST: $IMAGE_NAME_LATEST"
            - echo ""
            - echo "üî® Building Docker image..."
            - docker build -f Dockerfile.staging -t $IMAGE_NAME -t $IMAGE_NAME_LATEST .
            - echo "‚úÖ Docker build completed successfully"
            - echo ""
            - echo "üîê Logging into Docker Hub..."
            - echo $DOCKER_HUB_PASSWORD | docker login --username $DOCKER_HUB_USERNAME --password-stdin
            - echo "‚úÖ Docker Hub login successful"
            - echo ""
            - echo "üì§ Pushing images to registry..."
            - docker push $IMAGE_NAME
            - echo "‚úÖ Pushed $IMAGE_NAME"
            - docker push $IMAGE_NAME_LATEST
            - echo "‚úÖ Pushed $IMAGE_NAME_LATEST"
            - echo ""
            - echo "üßπ Cleaning up local images..."
            - docker rmi $IMAGE_NAME $IMAGE_NAME_LATEST
            - echo "‚úÖ Local images cleaned up"
            - echo "üéâ Build & Push to Registry step completed successfully!"
          artifacts:
            - $IMAGE_NAME
      - step:
          name: Deploy to Staging
          deployment: staging
          services:
            - docker
          script:
            - echo "üöÄ Starting Deploy to Staging step..."
            - echo "üìã Staging Deployment Parameters:"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  SSH_USER: $SSH_USER"
            - echo "  SSH_SERVER: $SSH_SERVER"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  CONTAINERS_TO_STOP_STAGING: $CONTAINERS_TO_STOP_STAGING"
            - echo "  SERVER_PORT_STAGING: $SERVER_PORT_STAGING"
            - echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:staging-$BITBUCKET_COMMIT
            - echo "üì¶ Image Name: $IMAGE_NAME"
            - echo ""
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  set -e
                  echo "üöÄ Starting deployment to staging environment..."
                  echo "üìã Staging Server Parameters:"
                  echo "  SSH_USER: $SSH_USER"
                  echo "  SSH_SERVER: $SSH_SERVER"
                  echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
                  echo "  CONTAINERS_TO_STOP_STAGING: $CONTAINERS_TO_STOP_STAGING"
                  echo "  SERVER_PORT_STAGING: $SERVER_PORT_STAGING"
                  echo "  NEXT_PUBLIC_API_URL: $NEXT_PUBLIC_API_URL"
                  echo "  IMAGE_NAME: $IMAGE_NAME"
                  echo ""
                  echo "üîê Logging into Docker Hub..."
                  docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
                  echo "‚úÖ Docker Hub login successful"
                  echo ""
                  echo "üì• Pulling latest image..."
                  docker pull $IMAGE_NAME
                  echo "‚úÖ Image pulled successfully"
                  echo ""
                  echo "üõë Stopping existing staging container..."
                  docker stop $CONTAINERS_TO_STOP_STAGING || true
                  echo "‚úÖ Staging container stopped"
                  echo ""
                  echo "üóëÔ∏è Removing old staging container..."
                  docker rm $CONTAINERS_TO_STOP_STAGING || true
                  echo "‚úÖ Staging container removed"
                  echo ""
                  echo "üöÄ Starting new staging container..."
                  docker run -d \
                    --name $CONTAINERS_TO_STOP_STAGING \
                    --restart unless-stopped \
                    -p $SERVER_PORT_STAGING:3000 \
                    -e NEXT_PUBLIC_NODE_ENV=staging \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    $IMAGE_NAME
                  echo "‚úÖ Staging container started successfully"
                  echo ""
                  echo "üßπ Cleaning up old images..."
                  docker system prune -f
                  echo "‚úÖ Cleanup completed"
                  echo ""
                  echo "üè• Checking staging container health..."
                  sleep 10
                  if curl -f http://localhost:$SERVER_PORT_STAGING/api/health; then
                    echo "‚úÖ Staging health check passed"
                  else
                    echo "‚ö†Ô∏è Staging health check failed, but continuing..."
                  fi
                  echo "üéâ Staging deployment completed successfully!"

  pull-requests:
    '**':
      - step:
          name: Test & Lint
          caches:
            - yarn
            - node_modules
          script:
            - echo "üîç Starting Test & Lint step (Pull Request)..."
            - echo "üìã Environment Variables:"
            - echo "  NODE_ENV: $NODE_ENV"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  BITBUCKET_BRANCH: $BITBUCKET_BRANCH"
            - echo "  PWD: $(pwd)"
            - echo "  Node version: $(node --version)"
            - echo "  Yarn version: $(yarn --version)"
            - echo ""
            - echo "üì¶ Installing dependencies..."
            - yarn install --frozen-lockfile
            - echo "‚úÖ Dependencies installed successfully"
            - echo ""
            - echo "üîç Running linting..."
            - yarn lint
            - echo "‚úÖ Linting completed"
            - echo ""
            - echo "üîç Running type checking..."
            - yarn type-check
            - echo "‚úÖ Type checking completed"
            - echo ""
            - echo "üß™ Running tests..."
            - yarn test:ci
            - echo "‚úÖ Tests completed"
            - echo "üéâ Test & Lint step completed successfully!"
          artifacts:
            - node_modules/**
            - .next/cache/**

  custom:
    manual-deploy:
      - variables:
          - name: ENVIRONMENT
            default: staging
            allowed-values:
              - test
              - staging
              - production
          - name: VERSION
            default: latest
      - step:
          name: Manual Deploy
          deployment: $ENVIRONMENT
          services:
            - docker
          script:
            - echo "üöÄ Starting Manual Deploy step..."
            - echo "üìã Manual Deploy Parameters:"
            - echo "  ENVIRONMENT: $ENVIRONMENT"
            - echo "  VERSION: $VERSION"
            - echo "  BITBUCKET_COMMIT: $BITBUCKET_COMMIT"
            - echo "  SSH_USER: $SSH_USER"
            - echo "  SSH_SERVER: $SSH_SERVER"
            - echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
            - echo "  DOCKER_HUB_PASSWORD: $DOCKER_HUB_PASSWORD"
            - echo "  PWD: $(pwd)"
            - echo "  Docker version: $(docker --version)"
            - echo ""
            - export IMAGE_NAME=majali1/bookagri-website:$ENVIRONMENT-$VERSION
            - echo "üì¶ Image Name: $IMAGE_NAME"
            - echo ""
            - pipe: atlassian/ssh-run:0.8.0
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  set -e
                  echo "üöÄ Starting manual deployment to $ENVIRONMENT environment..."
                  echo "üìã Manual Deploy Server Parameters:"
                  echo "  ENVIRONMENT: $ENVIRONMENT"
                  echo "  VERSION: $VERSION"
                  echo "  SSH_USER: $SSH_USER"
                  echo "  SSH_SERVER: $SSH_SERVER"
                  echo "  DOCKER_HUB_USERNAME: $DOCKER_HUB_USERNAME"
                  echo "  IMAGE_NAME: $IMAGE_NAME"
                  echo ""
                  echo "üîê Logging into Docker Hub..."
                  docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
                  echo "‚úÖ Docker Hub login successful"
                  echo ""
                  echo "üì• Pulling latest image..."
                  docker pull $IMAGE_NAME
                  echo "‚úÖ Image pulled successfully"
                  echo ""
                  if [ "$ENVIRONMENT" = "staging" ]; then
                    CONTAINER_NAME=$CONTAINERS_TO_STOP_STAGING
                    PORT=$SERVER_PORT_STAGING
                    echo "üéØ Using staging configuration:"
                    echo "  CONTAINER_NAME: $CONTAINER_NAME"
                    echo "  PORT: $PORT"
                  else
                    CONTAINER_NAME=$CONTAINERS_TO_STOP
                    PORT=$SERVER_PORT
                    echo "üéØ Using production configuration:"
                    echo "  CONTAINER_NAME: $CONTAINER_NAME"
                    echo "  PORT: $PORT"
                  fi
                  echo ""
                  echo "üõë Stopping existing container..."
                  docker stop $CONTAINER_NAME || true
                  echo "‚úÖ Container stopped"
                  echo ""
                  echo "üóëÔ∏è Removing old container..."
                  docker rm $CONTAINER_NAME || true
                  echo "‚úÖ Container removed"
                  echo ""
                  echo "üöÄ Starting new container..."
                  docker run -d \
                    --name $CONTAINER_NAME \
                    --restart unless-stopped \
                    -p $PORT:3000 \
                    -e NEXT_PUBLIC_NODE_ENV=$ENVIRONMENT \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    $IMAGE_NAME
                  echo "‚úÖ Container started successfully"
                  echo ""
                  echo "üßπ Cleaning up old images..."
                  docker system prune -f
                  echo "‚úÖ Cleanup completed"
                  echo ""
                  echo "üè• Checking container health..."
                  sleep 10
                  if curl -f http://localhost:$PORT/api/health; then
                    echo "‚úÖ Health check passed"
                  else
                    echo "‚ö†Ô∏è Health check failed, but continuing..."
                  fi
                  echo "üéâ Manual deployment to $ENVIRONMENT completed successfully!"

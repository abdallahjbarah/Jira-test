# Bitbucket Pipelines configuration for Agribooking Website
# Supports staging and production deployments with environment-specific configurations

image: node:20

definitions:
  steps:
    - step: &build-and-push-staging
        name: Build and Push Staging Docker Image
        script:
          - echo "Building Docker image for STAGING environment"
          - export IMAGE_NAME=majali1/bookagri-website:staging-$BITBUCKET_COMMIT
          - export DOCKERFILE=Dockerfile.staging
          - echo "Using Dockerfile: $DOCKERFILE"
          - echo "Setting up staging environment variables..."
          - export NODE_ENV=staging
          - export NEXT_PUBLIC_NODE_ENV=deployment
          - export NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          - docker build \
              --build-arg NODE_ENV=staging \
              --build-arg NEXT_PUBLIC_NODE_ENV=deployment \
              --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
              -f $DOCKERFILE \
              -t $IMAGE_NAME \
              -t majali1/bookagri-website:staging-latest .
          - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
          - docker push $IMAGE_NAME
          - docker push majali1/bookagri-website:staging-latest
          - echo "Successfully pushed staging image: $IMAGE_NAME"
        services:
          - docker

    - step: &build-and-push-production
        name: Build and Push Production Docker Image
        script:
          - echo "Building Docker image for PRODUCTION environment"
          - export IMAGE_NAME=majali1/bookagri-website:production-$BITBUCKET_COMMIT
          - export DOCKERFILE=Dockerfile.production
          - echo "Using Dockerfile: $DOCKERFILE"
          - echo "Setting up production environment variables..."
          - export NODE_ENV=production
          - export NEXT_PUBLIC_NODE_ENV=deployment
          - export NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
          - docker build \
              --build-arg NODE_ENV=production \
              --build-arg NEXT_PUBLIC_NODE_ENV=deployment \
              --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
              -f $DOCKERFILE \
              -t $IMAGE_NAME \
              -t majali1/bookagri-website:production-latest .
          - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
          - docker push $IMAGE_NAME
          - docker push majali1/bookagri-website:production-latest
          - echo "Successfully pushed production image: $IMAGE_NAME"
        services:
          - docker

    - step: &deploy-staging
        name: Deploy to Staging Server
        script:
          - export IMAGE_NAME=majali1/bookagri-website:staging-$BITBUCKET_COMMIT
          - echo "Deploying staging image $IMAGE_NAME"
          - pipe: atlassian/ssh-run:0.6.1
            variables:
              SSH_USER: $SSH_USER
              SERVER: $SSH_SERVER
              COMMAND: |
                echo "Deploying to STAGING environment..."
                echo "Stopping and removing existing staging containers..."
                docker stop $CONTAINERS_TO_STOP_STAGING || true
                docker rm $CONTAINERS_TO_STOP_STAGING || true
                echo "Pulling latest staging image..."
                docker pull $IMAGE_NAME
                echo "Starting new staging container..."
                docker run -p $SERVER_PORT_STAGING:3000 \
                  --name $CONTAINERS_TO_STOP_STAGING \
                  --restart unless-stopped \
                  -e NODE_ENV=staging \
                  -e NEXT_PUBLIC_NODE_ENV=deployment \
                  -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                  -d $IMAGE_NAME
                echo "Staging deployment completed successfully"
        services:
          - docker

    - step: &deploy-production
        name: Deploy to Production Server
        script:
          - export IMAGE_NAME=majali1/bookagri-website:production-$BITBUCKET_COMMIT
          - echo "Deploying production image $IMAGE_NAME"
          - pipe: atlassian/ssh-run:0.6.1
            variables:
              SSH_USER: $SSH_USER
              SERVER: $SSH_SERVER
              COMMAND: |
                echo "Deploying to PRODUCTION environment..."
                echo "Stopping and removing existing production containers..."
                docker stop $CONTAINERS_TO_STOP || true
                docker rm $CONTAINERS_TO_STOP || true
                echo "Pulling latest production image..."
                docker pull $IMAGE_NAME
                echo "Starting new production container..."
                docker run -p $SERVER_PORT:3000 \
                  --name $CONTAINERS_TO_STOP \
                  --restart unless-stopped \
                  -e NODE_ENV=production \
                  -e NEXT_PUBLIC_NODE_ENV=deployment \
                  -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                  -d $IMAGE_NAME
                echo "Production deployment completed successfully"
        services:
          - docker

pipelines:
  branches:
    staging:
      - step: *build-and-push-staging
      - step: *deploy-staging

    production:
      - step: *build-and-push-production
      - step: *deploy-production

  pull-requests:
    '**':
      - step:
          name: Lint and Test
          script:
            - npm ci
            - npm run lint
            - npm run type-check
            - echo "Code quality checks passed"

  custom:
    manual-deploy-staging:
      - step:
          name: Manual Deploy to Staging
          script:
            - echo "Manual staging deployment triggered"
            - export IMAGE_NAME=majali1/bookagri-website:staging-$BITBUCKET_COMMIT
            - export DOCKERFILE=Dockerfile.staging
            - echo "Deploying to STAGING environment"
            - docker build \
                --build-arg NODE_ENV=staging \
                --build-arg NEXT_PUBLIC_NODE_ENV=deployment \
                --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                -f $DOCKERFILE \
                -t $IMAGE_NAME .
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            - docker push $IMAGE_NAME
            - pipe: atlassian/ssh-run:0.6.1
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  docker stop $CONTAINERS_TO_STOP_STAGING || true
                  docker rm $CONTAINERS_TO_STOP_STAGING || true
                  docker pull $IMAGE_NAME
                  docker run -p $SERVER_PORT_STAGING:3000 \
                    --name $CONTAINERS_TO_STOP_STAGING \
                    --restart unless-stopped \
                    -e NODE_ENV=staging \
                    -e NEXT_PUBLIC_NODE_ENV=deployment \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    -d $IMAGE_NAME
          services:
            - docker

    manual-deploy-production:
      - step:
          name: Manual Deploy to Production
          script:
            - echo "Manual production deployment triggered"
            - export IMAGE_NAME=majali1/bookagri-website:production-$BITBUCKET_COMMIT
            - export DOCKERFILE=Dockerfile.production
            - echo "Deploying to PRODUCTION environment"
            - docker build \
                --build-arg NODE_ENV=production \
                --build-arg NEXT_PUBLIC_NODE_ENV=deployment \
                --build-arg NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                -f $DOCKERFILE \
                -t $IMAGE_NAME .
            - docker login --username $DOCKER_HUB_USERNAME --password $DOCKER_HUB_PASSWORD
            - docker push $IMAGE_NAME
            - pipe: atlassian/ssh-run:0.6.1
              variables:
                SSH_USER: $SSH_USER
                SERVER: $SSH_SERVER
                COMMAND: |
                  docker stop $CONTAINERS_TO_STOP || true
                  docker rm $CONTAINERS_TO_STOP || true
                  docker pull $IMAGE_NAME
                  docker run -p $SERVER_PORT:3000 \
                    --name $CONTAINERS_TO_STOP \
                    --restart unless-stopped \
                    -e NODE_ENV=production \
                    -e NEXT_PUBLIC_NODE_ENV=deployment \
                    -e NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL \
                    -d $IMAGE_NAME
          services:
            - docker

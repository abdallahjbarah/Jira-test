name: QA Manual Deploy

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Select the branch to deploy'
        required: true
        default: 'main'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout the selected branch
      - name: Checkout branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      # 2️⃣ Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3️⃣ Cache npm dependencies
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4️⃣ Install dependencies (ignore peer conflicts)
      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # 5️⃣ Build frontend
      - name: Build frontend
        run: npm run build

      # 6️⃣ Setup Amplify CLI
      - name: Setup Amplify CLI
        run: npm install -g @aws-amplify/cli

      # 7️⃣ Deploy to Amplify
      - name: Deploy to Amplify
        env:
          AMPLIFY_APP_ID: ${{ secrets.AMPLIFY_APP_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          QA_BACKEND_URL: ${{ secrets.QA_BACKEND_URL }}
        run: |
          set -e
          BRANCH="${{ github.event.inputs.branch }}"
          echo "Deploying branch: $BRANCH"

          # Pull existing environment if it exists
          if ! amplify pull --appId $AMPLIFY_APP_ID --envName $BRANCH --yes; then
            echo "Environment $BRANCH does not exist yet."
          fi

          # Checkout or create environment
          if ! amplify env checkout $BRANCH; then
            amplify env add --name $BRANCH --appId $AMPLIFY_APP_ID --yes
          fi

          # Set backend API URL for this environment
          echo "REACT_APP_API_URL=$QA_BACKEND_URL" > .env.production

          # Push backend changes
          amplify push --yes

          # Publish frontend
          amplify publish --yes

          # Get deployed URL dynamically
          DEPLOYED_URL=$(amplify status | grep "Hosting endpoint" | awk '{print $3}')
          echo "QA environment deployed at: $DEPLOYED_URL"
